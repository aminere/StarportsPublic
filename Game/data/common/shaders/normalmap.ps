
precision mediump float;
uniform sampler2D uTexture0; // diffuse
uniform sampler2D uTexture1; // normal map
uniform vec4 uLightColors;//[4];
//uniform int uLightCount;
uniform vec3 uLightPositions;//[4];
uniform float uLightAttenuation;
uniform vec3 uCameraPos;
uniform float uShininess;
uniform float uDiffuseFactor;

varying vec3 vVertPos;
varying vec2 vTexCoord;
varying vec3 vVertNorm;
varying vec3 vVertTangent;
varying vec3 vVertBinormal;

void main()
{
	vec4 texColor = texture2D(uTexture0, vTexCoord);
	vec4 normalColor = texture2D(uTexture1, vTexCoord);
    normalColor = (normalColor * 2.0) - 1.0;  // convert from [0, 1] to [-1, 1]	
	vec3 normal = normalize((vVertTangent * normalColor.x) + (vVertBinormal * normalColor.y ) + (vVertNorm * normalColor.z));
	
	//diffuse
	vec3 toLight = uLightPositions - vVertPos;
	float toLightDist = length(toLight);
	vec3 toLightDir = toLight / toLightDist;
    float diffuseCoefficient = max(0.0, dot(normal, toLightDir));
    vec3 diffuse = diffuseCoefficient * texColor.rgb * uLightColors.rgb; //* light.intensities;
    
    //specular
	vec3 specular = vec3(0.0);    
    if(diffuseCoefficient > 0.0)
	{
		vec3 toEyeDir = normalize(uCameraPos - vVertPos);
        float specularFactor = pow(max(0.0, dot(toEyeDir, reflect(-toLightDir, normal))), uShininess);
		vec4 specularColor = texColor*uDiffuseFactor;
		specular = specularColor.rgb * specularFactor; // * light.intensities;		
	}
	
	//attenuation
    float attenuation = 1.0 / (1.0 + clamp(uLightAttenuation, 0.0, 0.0) * pow(toLightDist, 2.0));

    //linear color (color before gamma correction)
    vec3 linearColor = attenuation*(diffuse + specular);
	gl_FragColor = vec4(linearColor, 1.0);	
}
